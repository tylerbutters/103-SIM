void addUserToDatabase(AccountDetails userRegistrationDetails) {
	fstream AccountsFile(g_accountsFile, ios::in | ios::app);

	if (!AccountsFile.is_open()) {
		throw std::runtime_error("Warning file is not open");
	}

	// writes user input to file
	AccountsFile << userRegistrationDetails.username << "," << userRegistrationDetails.password << "," << userRegistrationDetails.accountType << '\n';
	AccountsFile.close();
}

AccountDetails getRegistrationDetailsFromUser() {
	AccountDetails userRegistrationDetails;

	cout << '\n';
	drawLine();
	cout << "REGISTER" << '\n';
	drawLine();

	cout << '\n' << "Choose the account you want to create" << '\n';
	cout << '\n' << "[STUDENT = 1] [PARENT = 2] [TEACHER = 3] [ADMIN = 4] [BACK = 0]" << '\n';
	cin >> userRegistrationDetails.accountType;

	switch (userRegistrationDetails.accountType) {
	case 1:
		cout << "Student selected" << '\n';
		break;
	case 2:
		cout << "Parent selected" << '\n';
		break;
	case 3:
		cout << "Teacher selected" << '\n';
		break;
	case 4:
		cout << "Admin selected" << '\n';
		break;
	case 0:
		// back to main menu
		printMainMenu();
		break;
	default:
		cout << '\n' << "Invalid user type selected";
		break;
	}

	cout << '\n' << "Create a username: ";
	cin >> userRegistrationDetails.username;
	cout << "Create a password: ";
	cin >> userRegistrationDetails.password;

	return userRegistrationDetails;
}

void registerNewUserThenReturn() {
	// assigns new user info into struct
	AccountDetails userRegistrationDetails = getRegistrationDetailsFromUser();

	addUserToDatabase(userRegistrationDetails);

	cout << '\n' << "Account created!" << '\n';
	printMainMenu();
}